on:
  workflow_dispatch:
jobs:
  env:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: VKCOM/statshouse
        fetch-depth: 0
    - id: main
      run: |
        BUILD_COMMIT=$(git log --format="%H" -n 1)
        BUILD_COMMIT_TS=$(git log --format="%ct" -n 1)
        BUILD_TIME=$(date +%FT%T%z)
        BUILD_VERSION=$(git describe --tags --always --dirty)
        BUILD_VERSION=${BUILD_VERSION#v}
        echo "BUILD_COMMIT=$BUILD_COMMIT" >> "$GITHUB_OUTPUT"
        echo "BUILD_COMMIT_TS=$BUILD_COMMIT_TS" >> "$GITHUB_OUTPUT"
        echo "BUILD_TIME=$BUILD_TIME" >> "$GITHUB_OUTPUT"
        echo "BUILD_VERSION=$BUILD_VERSION" >> "$GITHUB_OUTPUT"
    outputs:
      BUILD_COMMIT: ${{ steps.main.outputs.BUILD_COMMIT }}
      BUILD_COMMIT_TS: ${{ steps.main.outputs.BUILD_COMMIT_TS }}
      BUILD_TIME: ${{ steps.main.outputs.BUILD_TIME }}
      BUILD_VERSION: ${{ steps.main.outputs.BUILD_VERSION }}
      REACT_APP_BUILD_VERSION: ${{ steps.main.outputs.REACT_APP_BUILD_VERSION }}
  front:
    needs: env
    runs-on: ubuntu-latest
    container:
      image: node:18
    steps:
    - uses: actions/checkout@v4
      with:
        repository: VKCOM/statshouse
        ref: ${{needs.env.outputs.BUILD_COMMIT}}
        fetch-depth: 0
    - run: |
        REACT_APP_BUILD_VERSION=${{needs.env.outputs.BUILD_VERSION}}-${{needs.env.outputs.BUILD_TIME}}
        make build-sh-ui
    - uses: actions/upload-artifact@v3
      with:
        name: statshouse-${{needs.env.outputs.BUILD_VERSION}}-ui
        path: |
          statshouse-ui/build
          .dummy_preserves_directory_structure
    - run: make build-grafana-ui
    - uses: actions/upload-artifact@v3
      with:
        name: statshouse-${{needs.env.outputs.BUILD_VERSION}}-ui
        path: |
          grafana-plugin-ui/dist
          .dummy_preserves_directory_structure
  back:
    needs: [env, front]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        debian_release: [bullseye]
    container:
      image: golang:1.19-${{ matrix.debian_release }}
    steps:
    - uses: actions/checkout@v4
      with:
        repository: VKCOM/statshouse
        ref: ${{needs.env.outputs.BUILD_COMMIT}}
        fetch-depth: 0
    - uses: actions/download-artifact@master
      with:
        name: statshouse-${{needs.env.outputs.BUILD_VERSION}}-ui
    - run: |
        BUILD_TIME=${{needs.env.outputs.BUILD_TIME}}
        BUILD_COMMIT=${{needs.env.outputs.BUILD_COMMIT}}
        BUILD_COMMIT_TS=${{needs.env.outputs.BUILD_COMMIT_TS}}
        BUILD_MACHINE=$(uname -n -m -r -s)
        BUILD_VERSION=${{needs.env.outputs.BUILD_VERSION}}
        cp -r statshouse-ui/build cmd/statshouse-api/
        make build-sh build-sh-metadata build-sh-api build-sh-grafana
    - uses: actions/upload-artifact@v3
      with:
        name: statshouse-${{needs.env.outputs.BUILD_VERSION}}-bin-${{ matrix.debian_release }}
        path: target
  deb:
    needs: [env, back, front]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        debian_release: [bullseye]
    container:
      image: debian:${{ matrix.debian_release }}
    steps:
    - run: |
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install -y devscripts build-essential dh-exec
        rm -rf /var/lib/apt/lists/*
    - uses: actions/checkout@v4
      with:
        repository: VKCOM/statshouse
        ref: ${{needs.env.outputs.BUILD_COMMIT}}
        fetch-depth: 0
    - uses: actions/download-artifact@master
      with:
        name: statshouse-${{needs.env.outputs.BUILD_VERSION}}-bin-${{ matrix.debian_release }}
        path: target
    - uses: actions/download-artifact@master
      with:
        name: statshouse-${{needs.env.outputs.BUILD_VERSION}}-ui
    - working-directory: build
      run: |
        rm -f changelog
        VERSION=1:${{needs.env.outputs.BUILD_VERSION}}-${{ matrix.debian_release }}
        dch --create --distribution stable --package statshouse --newversion "$VERSION" "up to version $VERSION"
        debuild --no-lintian -us -uc -b
    - run: |
        mkdir ${{ matrix.debian_release }}
        mv *.deb ${{ matrix.debian_release }}
    - uses: actions/upload-artifact@v3
      with:
        name: statshouse-${{needs.env.outputs.BUILD_VERSION}}-deb
        path: |
          ${{ matrix.debian_release }}/*
          .dummy_preserves_directory_structure
  pr:
    needs: [env, deb]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          path: ppa
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@master
        with:
          name: statshouse-${{needs.env.outputs.BUILD_VERSION}}-deb
          path: deb
      - run: echo -n "${{ secrets.GPG_SIGNING_KEY }}" | base64 --decode | gpg --batch --import
      - run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y reprepro
      - run: |
          git config --global user.name "$GITHUB_ACTOR"
          git config --global user.email ""
          git checkout -b "${{needs.env.outputs.BUILD_VERSION}}"
          for d in $GITHUB_WORKSPACE/deb/*/ ; do reprepro -b debian includedeb $(basename $d) $d*.deb; done
          git add --all
          git commit -m "${{needs.env.outputs.BUILD_VERSION}}"
          git push --set-upstream origin "${{needs.env.outputs.BUILD_VERSION}}"          
        working-directory: ppa
      - run: gh pr create --title "Release ${{needs.env.outputs.BUILD_VERSION}}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ppa
